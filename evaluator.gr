module Evaluator

from "./parsing.gr" include Parser
from "./tree.gr" include Tree
from "map" include Map
from "./scope.gr" include Scope
from "array" include Array
from "number" include Number
from "option" include Option

use Map.*
use Scope.*

use Tree.{type ParameterRestriction}

provide let rootScope = Scope.make()

let evaluateBool = (cond) => match(cond) {
    true => 1,
    false => 0
}

let isNumberInSet = (set, value) => {
    match(Scope.getSet(set, rootScope)) {
        Some(s) => s(value),
        None => false
    }
}

let getParameterRestriction = (name, restrictions) => {
    Array.find(x => {
        x.parameterName == name
    }, restrictions)
}

let rec visit = (tree, scope) => {
    match(tree) {
        Tree.NumberExpression(num) => num,
        Tree.GroupExpression(inner) => visit(inner, scope),
        Tree.BinaryExpression(left, op, right) => visitBinary(left, op, right, scope),
        Tree.VariableReferenceExpression(id) => visitVariableRef(id, scope),
        Tree.FunctionCallExpression(name, args) => visitFunctionCall(name, args, scope),
        Tree.PreUnaryExpression(op, expr) => visitPreUnary(op, expr, scope),
        Tree.AbsExpr(inner) => visitAbs(inner, scope),
        Tree.SetDefinition(name, parent, check) => visitSetDefinition(name, parent, check, scope),
        Tree.FunctionDefinition(name, params, definition, restrictions) => visitFunctionDefinition(name, params, definition, restrictions, scope),
        Tree.FunctionRestriction(name, restrictions, def) => visitFunctionRestriction(name, restrictions, def, scope),
        _ => 0
    }
}
and visitFunctionDefinition = (name, params, definition, restrictions, scope) => {
    Scope.setFunction(name, (args) => {
        if(Array.length(args) != Array.length(params)) {
            fail("argument mismatch for function " ++ name)
        }

        let funcScope = Scope.fromParent(scope)
        let evaluatedArgs = Array.map(arg => visit(arg, funcScope), args)
                
        Array.forEachi((p, i) => {
            match(p){
                Tree.VariableReferenceExpression(pName) => {
                    let value = evaluatedArgs[i]
                    let restriction = getParameterRestriction(pName, restrictions)
                    
                    if(Option.isSome(restriction)) {
                        let r = Option.unwrap(restriction)

                        let setCheck = match(Scope.getSet(r.set, scope)) {
                                                Some(parentSet) => parentSet,
                                                None => fail("Set " ++ r.set ++ " not found")
                                            }

                        if(!setCheck(value)) {
                            fail(toString(value) ++ " does not met requierements. It's not in set " ++ r.set)
                        }
                    }

                    Scope.setVariable(pName, value, funcScope)
                },
                _ => fail("error")
            }
        }, params)

        visit(definition, funcScope)
    }, scope)

    0
}
and visitAbs = (inner, scope) => {
    let visitedInner = visit(inner, scope)

    Number.abs(visitedInner)
}
and visitPreUnary = (op, expr, scope) => {
    match(op) {
        "-" => visit(expr, scope) * -1,
        _ => 0
    }
}
and visitFunctionCall = (name, args, scope) => {
    match(Scope.getFunction(name, scope)) {
        Some(callback) => callback(args),
        None => fail("function " ++ name ++ " not found")
    }
}
and visitBinary = (left, op, right, scope) => {
    if(op == Tree.Assignment) {
        return visitVariableBinding(left, right, scope)
    }

    let evaluatedLeft = visit(left, scope)
    let evaluatedRight = visit(right, scope)

    return match(op) {
        Tree.Add => evaluatedLeft + evaluatedRight,
        Tree.Sub => evaluatedLeft - evaluatedRight,
        Tree.Multiply => evaluatedLeft * evaluatedRight,
        Tree.Divide => evaluatedLeft / evaluatedRight,
        Tree.Modulo => evaluatedLeft % evaluatedRight,
        Tree.LessThan => evaluateBool(evaluatedLeft < evaluatedRight),
        Tree.GreaterThan => evaluateBool(evaluatedLeft > evaluatedRight),
        Tree.Equals => evaluateBool(evaluatedLeft == evaluatedRight),
        Tree.And => evaluateBool(evaluatedLeft == 1 && evaluatedRight == 1),
        Tree.Or => evaluateBool(evaluatedLeft == 1 || evaluatedRight == 1),

        _ => 0
    }
}
and visitSetDefinition = (name, parent, check, scope) => {
    Scope.defineSet(name, value => {
        let parentSetCheck = match(Scope.getSet(parent, scope)) {
            Some(parentSet) => parentSet,
            None => fail("Set " ++ parent ++ " not found")
        }
        let parentEvaluated = parentSetCheck(value)
        
        let subscope = Scope.fromParent(scope)
        Scope.setVariable("x", value, scope)

        let result = match(visit(check, subscope)) {
            1 => true,
            0 => false,
            _ => false
        }

        result && parentEvaluated
    }, scope)

    0
}
and visitVariableRef = (id, scope) => {
    match(Scope.getVariable(id, scope)) {
        Some(value) => value,
        None => fail("Variable " ++ id ++ " not found")
    }
}
and visitFunctionRestriction = (funcName, def, restrictions, scope) => {
   let tmp = match(def) {
        Tree.FunctionDefinition(name, params, def, r) => {
            Tree.FunctionDefinition(name, params, def, restrictions)
        },
        _ => Tree.Invalid()
    }
    visit(tmp, scope)

    0
}
and visitVariableBinding = (name, value, scope) => {
    match(name) {
        Tree.VariableReferenceExpression(id) => {
            let visitedValue = visit(value, scope)
            Scope.setVariable(id, visitedValue, scope)

            visitedValue
        },
        _ => 0
    }
}

Scope.setVariable("pi", 3.14, rootScope)

Scope.defineSet("N", value => Number.isInteger(value) && value >= 0, rootScope)
Scope.defineSet("Z", value => Number.isInteger(value), rootScope)
Scope.defineSet("Q", value => Number.isFloat(value), rootScope)

Scope.setFunction("power", (args) => {
    let scope = Scope.fromParent(rootScope)
    let base = visit(args[0], scope)
    let exponent = visit(args[1], scope)
    
    base ** exponent
}, rootScope)

provide let eval = (input) => {
    let tree = Parser.parse(input)

    visit(tree, rootScope)
}
