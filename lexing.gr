module Lexing

from "set" include Set
from "string" include String
from "list" include List
from "char" include Char

provide enum rec TokenType {
    Plus,
    Minus,
    Asterisk,
    Slash,
    Invalid
}

provide record Token {
  text: String,
  kind: TokenType
}

let nextChar = state => {
  return String.charAt(state.position, state.input)
}

let isNumber = c => Char.isAsciiDigit(c) 

let nextToken = state => {
  let c = nextChar(state)

  if(isNumber(c)) {
    while(isNumber(c)) {
      //todo
    }
  }

  return { text: "", kind: Invalid }
}

record LexingState {
  mut position: Number,
  input: String
}

let isEndOfInput = state => state.position >= String.length(state.input)

provide let lex = input => {
  let state : LexingState = {
    position: 0,
    input: input
  }

  let tokens = Set.make()

  while(isEndOfInput(state)) {
    Set.add(nextToken(state), tokens)
  }

  return tokens
}

