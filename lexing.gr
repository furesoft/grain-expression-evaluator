module Lexing

from "buffer" include Buffer
from "string" include String
from "list" include List
from "char" include Char
from "result" include Result
from "map" include Map


provide record LexingState {
  mut position: Number,
  input: String
}
use Map.*

provide enum rec TokenType {
    Plus,
    Minus,
    Asterisk,
    Slash,
    Number,
    EndOfInput,
    OpenParen,
    CloseParen,
    Unknown,
    Identifier,
    Comma,
    Equals,
    EqualsEquals,
    Less,
    Greater,
    Percentage,
    AmpersandAmpersand,
    Ampersand,
    Pipe,
    PipePipe,
    Set,
    In,
    Empty
}

let keywords = Map.make()
Map.set("set", Set, keywords)
Map.set("in", In, keywords)

let getTokenKind = (text) => {
  match(Map.get(text, keywords)) {
    Some(kind) => kind,
    None => Identifier
  }
}

provide record Token {
  text: String,
  kind: TokenType
}

provide let emptyToken = {
  text: "",
  kind: Empty
}

let isEndOfInput = state => state.position >= String.length(state.input)

let nextChar = (state) => {
  if(state.position >= String.length(state.input)) {
    '\0'
  }
  else {
    String.charAt(state.position, state.input)
  }
}

let buffer = Buffer.make(256)

let tokenFromChar = (char, kind) => { text: Char.toString(char), kind: kind }
let tokenFromString = (str, kind) => { text: str, kind: kind }

provide let nextToken = state => {
  Buffer.clear(buffer)

  while (state.position < String.length(state.input)) {
    let c = String.charAt(state.position, state.input)

    if(c == ' ') {
      state.position += 1
      continue
    }
    else {
      break
    }
  }

  let mut char = nextChar(state)

  if(char == '\0') {
    return tokenFromChar(char, EndOfInput)
  }
  
  if(char == '+') {
    state.position += 1
    return tokenFromChar(char, Plus)
  }

  if(char == '*') {
    state.position += 1
    return tokenFromChar(char, Asterisk)
  }

  if(char == '-') {
    state.position += 1
    return tokenFromChar(char, Minus)
  }

  if(char == '/') {
    state.position += 1
    return tokenFromChar(char, Slash)
  }

  if(char == '%') {
    state.position += 1
    return tokenFromChar(char, Percentage)
  }

  if(char == '(') {
    state.position += 1
    return tokenFromChar(char, OpenParen)
  }

  if(char == ')') {
    state.position += 1
    return tokenFromChar(char, CloseParen)
  }

  if(char == '&') {
    state.position += 1

    if(nextChar(state) == '&') {
      state.position += 1
      return tokenFromString("&&", AmpersandAmpersand)
    }

    return tokenFromChar('&', Ampersand)
  }

  if(char == '|') {
    state.position += 1

    if(nextChar(state) == '|') {
      state.position += 1
      return tokenFromString("||", PipePipe)
    }

    return tokenFromChar('|', Pipe)
  }

  if(char == '=') {
    state.position += 1

    if(nextChar(state) == '=') {
      state.position += 1

      return tokenFromString("==", EqualsEquals)
    }

    return tokenFromChar(char, Equals)
  }

  if(char == ',') {
    state.position += 1
    return tokenFromChar(char, Comma)
  }

  if(char == '<') {
    state.position += 1
    return tokenFromChar(char, Less)
  }

  if(char == '>') {
    state.position += 1
    return tokenFromChar(char, Greater)
  }

  if(Char.isAsciiDigit(char)) {
    while(Char.isAsciiDigit(char)) {
      Buffer.addChar(char, buffer)
      
      state.position += 1
      char = nextChar(state)
    }

    return { text: Buffer.toString(buffer), kind: Number }
  }

  if(Char.isAsciiAlpha(char)) {
    while(Char.isAsciiAlpha(char) || Char.isAsciiDigit(char)) {
      Buffer.addChar(char, buffer)
      
      state.position += 1
      char = nextChar(state)
    }

    let tokenText = Buffer.toString(buffer)
    let tokenKind = getTokenKind(tokenText)

    return { text: tokenText, kind: tokenKind }
  }

  return tokenFromChar(char, Unknown)
}


