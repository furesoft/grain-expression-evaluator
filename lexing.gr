module Lexing

from "set" include Set
from "string" include String
from "list" include List
from "char" include Char


record LexingState {
  mut position: Number,
  input: String
}

provide enum rec TokenType {
    Plus,
    Minus,
    Asterisk,
    Slash,
    Number,
    Invalid
}

provide record Token {
  text: String,
  kind: TokenType
}

let nextChar = state => {
  state.position += 1
  
  return String.charAt(state.position, state.input)
}

let nextToken = state => {
  let mut c = nextChar(state)
  let buffer = Set.make()

  if(Char.isAsciiDigit(c)) {
    while(Char.isAsciiDigit(c)) {
      state.position += 1

      c = nextChar(state)
      Set.add(c, buffer)
    }

    return { text: String.implode(Set.toArray(buffer)), kind: Number}
  }

  return { text: Char.toString(c), kind: Invalid }
}


let isEndOfInput = state => state.position >= String.length(state.input)

provide let lex = input => {
  let state : LexingState = {
    position: -1,
    input: input
  }

  let tokens = Set.make()

  while(!isEndOfInput(state)) {
    Set.add(nextToken(state), tokens)
  }

  return tokens
}

